---
title: "data"
format: html
---

# Libraries

```{python}
import os
import glob
import polars as pl
import tidypolars as tp
```

# DATA

## location_details

```{python}
# read location data
dt_loc = (
    pl
    .read_excel(
        "P:/2023/02/20230203/Calculations/SIITE 1.0/parent_file.xlsx",
        sheet_name = 'location_details',
        read_csv_options={"skip_rows_after_header": 1},
        xlsx2csv_options={"skip_empty_lines": True}
    )
    .select([
        'Location_ID_ind',
        'Location_ID_group',
        'Loc_type',
        'Easting',
        'Northing',
        'WD',
        'Location_purpose',
        'Location_purpose_combined',
        'Year',
        'FD'
    ])
    .rename({
        "Location_ID_ind": "loc_id",
        "Location_ID_group": "loc_id_group",
        "Loc_type": "loc_type",
        "Easting": "easting",
        "Northing": "northing",
        "Location_purpose": "loc_purpose",
        "Location_purpose_combined": "loc_purpose_comb",
        "Year": "year",
    })
)
```

## _raw

```{python}
# file info
folder_path = 'P:/2023/02/20230203/Calculations/SIITE 1.0/_factual_interp_bh/raw_data'
file_pattern = '*_raw.csv'

# list of files
files_raw = glob.glob(os.path.join(folder_path, file_pattern))

# empty list of data frames
dataframes = []

# fill-in the list
for file in files_raw:
    df = pl.read_csv(file, skip_rows_after_header = 1).rename({"name": "loc_id"})
    dataframes.append(df)

# merge dataframes
dt_cpt_raw = pl.concat(dataframes)
```

## _interp

```{python}
# file info
folder_path = 'P:/2023/02/20230203/Calculations/SIITE 1.0/_factual_interp_bh/interp_data'
file_pattern = '*_interp.csv'

# list of files
files_interp = glob.glob(os.path.join(folder_path, file_pattern))

# empty list of data frames
dataframes = []

# fill-in the list
for file in files_interp:
    df = pl.read_csv(
        file,
        skip_rows_after_header = 1,
        ignore_errors = True,
        dtypes = ({
            'borehole_id': pl.Utf8,
            'depth': pl.Float64,
            'qc': pl.Float64,
            'fs': pl.Float64,
            'u2': pl.Float64,
            'factor_a': pl.Float64,
            'stroke_id': pl.Utf8,
            'soil_unit': pl.Utf8,
            'soil_group': pl.Utf8,
            'soil_type': pl.Utf8,
            'depth_stroke': pl.Float64,
            'dummy_stroke': pl.Float64,
            'dh': pl.Float64,
            'p0': pl.Float64,
            'p0_': pl.Float64,
            'qt': pl.Float64,
            'Rf': pl.Float64,
            'Bq': pl.Float64,
            'Fr': pl.Float64,
            'Qt': pl.Float64,
            'Ic': pl.Float64,
            'n_Ic': pl.Float64,
            'ISBT': pl.Float64,
            'SBT': pl.Float64,
            'SBT_2016': pl.Utf8,
            'su': pl.Float64,
            'sudu': pl.Float64,
            'su_rem': pl.Float64,
            'OCR_su_p0_': pl.Float64,
            'K0_su_p0_': pl.Float64,
            'pc_kQt': pl.Float64,
            'OSD_pc_kQt': pl.Float64,
            'OCR_kQt': pl.Float64,
            'su_p0_kQt': pl.Float64,
            'K0_kQt': pl.Float64,
            'K0_KM': pl.Float64,
            'dr_sat': pl.Float64,
            'dr_sat_fines': pl.Float64,
            'pc_qnet': pl.Float64,
            'OSD_pc_qnet': pl.Float64,
            'OCR_qnet': pl.Float64,
            'K0_mayne': pl.Float64,
            'phi_M': pl.Float64,
            'phi_AS': pl.Float64,
            'su_sand': pl.Float64,
            'nkt_sand': pl.Float64,
            'tf_ref_oc': pl.Float64,
            'tf_ref_c': pl.Float64,
            'tf_drain': pl.Float64,
            'tf_drain_X3': pl.Float64,
            'tf_drain_X5': pl.Float64,
            'vs_RC_clay': pl.Float64,
            'vs_RC_silt': pl.Float64,
            'vs_RC_sand': pl.Float64,
            'vs_MR': pl.Float64,
            'Gmax_vs_RC_clay': pl.Float64,
            'Gmax_vs_RC_silt': pl.Float64,
            'Gmax_vs_RC_sand': pl.Float64,
            'Gmax_vs_MR': pl.Float64,
            'Gmax_RS': pl.Float64,
            'Gmax_SM': pl.Float64,
            'kv_RC': pl.Float64,
            'psi_BJ': pl.Float64,
            'phi_psi': pl.Float64,
            'Nkt_Bq': pl.Float64,
            'k_hyd': pl.Float64,
            'M0_NC_sand': pl.Float64,
            'M0_OC_sand': pl.Float64,
            'M0_clay': pl.Float64,
            'st_clay': pl.Float64,
            'UCS': pl.Float64,
            'cav': pl.Float64,
            'Bq_cav': pl.Float64,
            'Soil_type': pl.Utf8,
            'T_UW': pl.Float64,
            'w': pl.Float64,
            'Ip': pl.Float64,
            'St': pl.Float64,
            'eps_50': pl.Float64,
            'Fines_Sand': pl.Float64,
            'SBT_sand_lim': pl.Float64,
            'SBT_clay_lim': pl.Float64,
            'Nkt': pl.Float64,
            'Nkt_A': pl.Float64,
            'Nkt_B': pl.Float64,
            'Nkt_D': pl.Float64,
            'Nkt_E': pl.Float64,
            'Ndu': pl.Float64,
            'A_rem': pl.Float64,
            'Nucs': pl.Float64,
            'Nucs_A': pl.Float64,
            'Nucs_B': pl.Float64,
            'Nucs_D': pl.Float64,
            'Nucs_E': pl.Float64,
            'k': pl.Float64,
            'pc_Mayne_A': pl.Float64,
            'pc_Mayne_B': pl.Float64,
            'K0_Clay_A': pl.Float64,
            'K0_Mayne_A': pl.Float64,
            'K0_Mayne_B': pl.Float64,
            'K0_Sand': pl.Float64,
            'Gmax_Sand_A': pl.Float64,
            'Gmax_Sand_B': pl.Float64,
            'Gmax_Sand_C': pl.Float64,
            'Gmax_Sand_A_A': pl.Float64,
            'Gmax_Sand_A_B': pl.Float64,
            'Gmax_Sand_A_D': pl.Float64,
            'Gmax_Sand_A_E': pl.Float64,
            'Gmax_Clay_A': pl.Float64,
            'Gmax_Clay_B': pl.Float64,
            'Gmax_Clay_A_A': pl.Float64,
            'Gmax_Clay_A_B': pl.Float64,
            'Gmax_Clay_A_D': pl.Float64,
            'Gmax_Clay_A_E': pl.Float64,
            'Gmax_m': pl.Float64,
            'Gmax_n': pl.Float64,
            'Gmax_g': pl.Float64,
            'Gmax_g_A': pl.Float64,
            'Gmax_g_B': pl.Float64,
            'Gmax_g_D': pl.Float64,
            'Gmax_g_E': pl.Float64,
            'fi_Sand_A': pl.Float64,
            'fi_Sand_B': pl.Float64,
            'fi_Sand_A_A': pl.Float64,
            'fi_Sand_A_B': pl.Float64,
            'fi_Sand_A_D': pl.Float64,
            'fi_Sand_A_E': pl.Float64,
            'M0_Clay_A': pl.Float64,
            'M0_NC_Sand_A': pl.Float64,
            'M0_NC_Sand_B': pl.Float64,
            'M0_NC_Sand_C': pl.Float64,
            'M0_NC_Sand_D': pl.Float64,
            'M0_NC_Sand_E': pl.Float64,
            'M0_NC_Sand_F': pl.Float64,
            'M0_OC_Sand_A': pl.Float64,
            'M0_OC_Sand_B': pl.Float64,
            'M0_OC_Sand_C': pl.Float64,
            'k_A': pl.Float64,
            'k_B': pl.Float64,
            'k_C': pl.Float64,
            '  k_D': pl.Float64,
            'General_soil_description': pl.Utf8,
            'Colour_code': pl.Utf8
        })).rename({
            "borehole_id": "loc_id",
            "General_soil_description": "soil_desc",
            "Colour_code": "soil_col"
        })
    dataframes.append(df)

# merge dataframes
dt_cpt_int = pl.concat(dataframes)
```

## soil_unit

```{python}
# read soil unit data
dt_unit = (
    pl
    .read_excel(
        "P:/2023/02/20230203/Calculations/SIITE 1.0/_global_unit_layer.xlsx",
        read_csv_options={"skip_rows_after_header": 1},
        xlsx2csv_options={"skip_empty_lines": True}
    )
    .select([
        'Location_ID_group',
        'Location_purpose',
        'Soil_unit',
        'Soil_type',
        'Depth_top',
        'Depth_bot',
        'Desc_type',
        'Soil_description',
        'Plot_colour',
        'Geo_HZ',
        'Depth_HZ_bot'
    ])
    .rename({
        "Location_ID_group": "loc_id_group",
        "Location_purpose": "loc_purp",
        "Soil_unit": "soil_unit",
        "Soil_type": "soil_type",
        "Depth_top": "depth_top",
        "Depth_bot": "depth_bot",
        "Desc_type": "desc_type",
        "Soil_description": "soil_desc",
        "Plot_colour": "soil_col",
        "Geo_HZ": "HZ_geo",
        "Depth_HZ_bot": "HZ_depth_bot"
    })
    .filter(pl.col('soil_unit') != 'EoB')
    .with_columns(
        pl.col("soil_desc").fill_null(strategy="forward"),
        (pl.col('depth_bot') - pl.col('depth_top')).alias('soil_unit_thickness')
    )
)
```

# CSV

Write data in CSV files

```{python}
# raw
dt_loc.write_csv('data-source/dt_loc.csv')
dt_cpt_raw.write_csv('data-source/dt_cpt_raw.csv')
dt_cpt_int.write_csv('data-source/dt_cpt_int.csv')
dt_unit.write_csv('data-source/dt_unit.csv')
```